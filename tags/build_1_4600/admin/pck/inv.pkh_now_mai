create or replace package inv
as
--<PACKAGE>
--   SCCS Identifiers :-
--
--       sccsid           : @(#)inv.pkh_now_mai	1.1 03/01/01  -- @(#)inv.pck	1.4 12/21/99
--       Module Name      : inv.pkh_now_mai      -- inv.pck
--       Date into SCCS   : 01/03/01 16:23:07  -- 99/12/21 15:45:27
--       Date fetched Out : 07/06/13 14:10:40  -- 00/09/06 12:20:24
--       SCCS Version     : 1.1      -- 1.4
--
--   The Inventory library package.
--
--   Author : Rob Coupe
--
--</PACKAGE>
--<GLOBVAR>

g_sccsid	CONSTANT	VARCHAR2(2000) := '"@(#)inv.pkh_now_mai	1.1 03/01/01"'; --"@(#)inv.pck	1.4 12/21/99"';
--  some common error messages - prevent more than one database lookup
  g_thing_already_exists	VARCHAR2(2000);
  g_thing_does_not_exist	VARCHAR2(2000);
--</GLOBVAR>


--
-----------------------------------------------------------------------------
--
--<PROC NAME="GET_VERSION">
-- This function returns the current SCCS version
FUNCTION get_version RETURN varchar2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="GET_BODY_VERSION">
-- This function returns the current SCCS version of the package body
FUNCTION get_body_version RETURN varchar2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--function get_iit_id ( p_pk_id in varchar2 ) return number;
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_iit_pk">
function get_iit_pk ( p_item_id in number ) return varchar2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_ity_descr">
function get_ity_descr ( p_ity in varchar2) return varchar2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_ity">
function get_ity ( p_item_id  in number ) return varchar2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--function get_item_details ( p_item_id in number) return varchar2;
--function get_xsp_offset_range( p_sys_flag in varchar2, p_scl_class in varchar2 ) return number;
--function get_xsp_descr( p_sys_flag in varchar2, p_scl_class in varchar2, p_x_sect_val in varchar2) return varchar2;
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_pk_column_name">
function get_pk_column_name ( p_ity_inv_code in nm_inv_types.nit_inv_type%type ) return varchar2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="ity_exists">
function ity_exists( p_ity in nm_inv_types.nit_inv_type%type ) return boolean;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="pop_inv_colours">
procedure pop_inv_colours;
--</PROC>
--
-----------------------------------------------------------------------------
--
--function get_last_mp_rse( p_ity in varchar2, p_rse_he_id in number, p_chain in number ) return number;
--function get_last_mp( p_ity in varchar2, p_route in number, p_rse_he_id in number, p_chain in number ) return number;
--function get_mp_offset( p_iit in number, p_route in number, p_rse_he_id in number, p_chain in number ) return number;
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_nit_inv_type">
function get_nit_inv_type (tablename in nm_inv_types.nit_table_name%type) return nm_inv_types.nit_inv_type%type;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="valid_fk_ial">
  -- Procedure to validate and return foreign key value
  --
  PROCEDURE valid_fk_ial
	( a_ial_domain	IN	nm_inv_attri_lookup.ial_domain%type
	, a_ial_dtp_code	IN	nm_inv_attri_lookup.ial_dtp_code%type
	, a_ial_meaning	IN OUT	nm_inv_attri_lookup.ial_meaning%type
  );
--
  -- Procedure to validate and return foreign key value (Overloaded in
  -- the use of the date at which the validation is to apply. )
  -- The date is passed as a varchar2 of a specified mask since Pl/SQL 1
  -- differs in the way date parameters are held to PL/SQL 2.
  --
  PROCEDURE valid_fk_ial
	( a_ial_domain	IN	nm_inv_attri_lookup.ial_domain%type
	, a_ial_dtp_code	IN	nm_inv_attri_lookup.ial_dtp_code%type
	, a_ial_meaning	IN OUT	nm_inv_attri_lookup.ial_meaning%type
	, a_effective   IN      varchar2
	, a_date_mask   IN      varchar2 := 'DD-MON-RRRR'
  );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PRAGMA>
pragma restrict_references(get_version, WNDS );
--*pragma restrict_references(get_iit_id, WNDS );
pragma restrict_references(get_iit_pk , WNDS );
pragma restrict_references(get_ity_descr , WNDS );
pragma restrict_references(get_ity , WNDS );
--*pragma restrict_references(get_item_details, WNDS );
--*pragma restrict_references(get_xsp_offset_range, WNDS );
--*pragma restrict_references(get_xsp_descr, WNDS );
pragma restrict_references(get_pk_column_name, WNDS );
pragma restrict_references(ity_exists, WNDS );
--*pragma restrict_references( get_last_mp_rse, WNDS );
--*pragma restrict_references( get_last_mp, WNDS );
--*pragma restrict_references( get_mp_offset, WNDS ); - Unit conversion cannot be included with this pragma
pragma restrict_references( get_nit_inv_type, WNDS );
--</PRAGMA>

end inv;
/
