CREATE OR REPLACE PACKAGE nm3api_inv AS
--<PACKAGE>
--   SCCS Identifiers :-
--
--       sccsid           : @(#)nm3api_inv.pkh	1.5 12/18/03
--       Module Name      : nm3api_inv.pkh
--       Date into SCCS   : 03/12/18 11:57:53
--       Date fetched Out : 07/06/13 14:10:57
--       SCCS Version     : 1.5
--
--
--   Author : Jonathan Mills
--
--   Inventory API package
--
--   This package is a collection of many procedures and functions that are available
--   elsewhere. The intention is to provide a more concise and more easily accessible
--   list of programmer interface modules.
--
-----------------------------------------------------------------------------
--	Copyright (c) exor corporation ltd, 2002
-----------------------------------------------------------------------------
--</PACKAGE>
--<GLOBVAR>
  g_sccsid      CONSTANT  varchar2(2000) := '"@(#)nm3api_inv.pkh	1.5 12/18/03"';
--  g_sccsid is the SCCS ID for the package
--
   c_replace CONSTANT varchar2(7) := 'REPLACE';
   c_append  CONSTANT varchar2(7) := 'APPEND';
--
--</GLOBVAR>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="GET_VERSION">
-- This function returns the current SCCS version of this package
FUNCTION get_version RETURN varchar2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="GET_BODY_VERSION">
-- This function returns the current SCCS version of the package body for this package
FUNCTION get_body_version RETURN varchar2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_iit_ne_id">
-- This function returns the internal identifier (IIT_NE_ID) of an inventory
--  record as identified by the IIT_PRIMARY_KEY and IIT_INV_TYPE on a given effective date
--
FUNCTION get_iit_ne_id (p_iit_primary_key IN nm_inv_items.iit_primary_key%TYPE
                       ,p_iit_inv_type    IN nm_inv_items.iit_inv_type%TYPE
                       ,p_effective_date  IN date DEFAULT nm3user.get_effective_date
                       ) RETURN nm_inv_items.iit_ne_id%TYPE;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_group_placement_for_item">
FUNCTION get_group_placement_for_item (p_iit_primary_key IN nm_inv_items.iit_primary_key%TYPE
                                      ,p_iit_inv_type    IN nm_inv_items.iit_inv_type%TYPE
                                      ,p_group_type      IN nm_group_types.ngt_group_type%TYPE DEFAULT nm3user.get_preferred_lrm
                                      ,p_effective_date  IN date                               DEFAULT nm3user.get_effective_date
                                      ) RETURN nm_placement_array;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_inventory_item">
-- These procedures will create and optionally locate an inventory item
--
--  p_rec_iit once returned from these procedures will contain the record as it
--   has been inserted, so p_rec_iit.iit_ne_id will contain the internal iit_ne_id
--   of the new item.
--
-- 1. This procedure will create the inventory item record (not located)
--
PROCEDURE create_inventory_item (p_rec_iit           IN OUT nm_inv_items%ROWTYPE
                                ,p_effective_date    IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                                );
--
-- 2. This procedure will create the inventory item and locate it along the entire length
--     of the network element (only suitable for continous items) specified by NE_UNIQUE
--
PROCEDURE create_inventory_item (p_rec_iit            IN OUT nm_inv_items%ROWTYPE
                                ,p_effective_date     IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                                ,p_element_ne_unique  IN     nm_elements.ne_unique%TYPE
                                ,p_element_ne_nt_type IN     nm_elements.ne_nt_type%TYPE      DEFAULT NULL
                                );
--
-- 3. This procedure will create the inventory item and locate it along the entire length
--     of the network element (only suitable for continous items) specified by the internal NE_ID
--
PROCEDURE create_inventory_item (p_rec_iit            IN OUT nm_inv_items%ROWTYPE
                                ,p_effective_date     IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                                ,p_element_ne_id      IN     nm_elements.ne_id%TYPE
                                );
--
-- 4. This procedure will create the inventory item and locate it between the specified MPs
--     of the network element specified by the NE_UNIQUE
--    p_element_end_mp does not need to be specified for POINT inventory items
--
PROCEDURE create_inventory_item (p_rec_iit            IN OUT nm_inv_items%ROWTYPE
                                ,p_effective_date     IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                                ,p_element_ne_unique  IN     nm_elements.ne_unique%TYPE
                                ,p_element_ne_nt_type IN     nm_elements.ne_nt_type%TYPE      DEFAULT NULL
                                ,p_element_begin_mp   IN     nm_members.nm_begin_mp%TYPE
                                ,p_element_end_mp     IN     nm_members.nm_end_mp%TYPE        DEFAULT NULL
                                );
--
-- 5. This procedure will create the inventory item and locate it between the specified MPs
--     of the network element specified by the internal NE_ID
--    p_element_end_mp does not need to be specified for POINT inventory items
--
PROCEDURE create_inventory_item (p_rec_iit            IN OUT nm_inv_items%ROWTYPE
                                ,p_effective_date     IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                                ,p_element_ne_id      IN     nm_elements.ne_id%TYPE
                                ,p_element_begin_mp   IN     nm_members.nm_begin_mp%TYPE
                                ,p_element_end_mp     IN     nm_members.nm_end_mp%TYPE        DEFAULT NULL
                                );
--
-- 6. This procedure will create the inventory item and locate it over the entire
--     area as contained within the Saved Network Extent - identified by the internal NSE_ID
--
PROCEDURE create_inventory_item (p_rec_iit            IN OUT nm_inv_items%ROWTYPE
                                ,p_effective_date     IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                                ,p_nse_id             IN     nm_saved_extents.nse_id%TYPE
                                );
--
-- 7. This procedure will create the inventory item and locate it on a specified route
--     from datum offset to datum offset allowing specification of subclass either when ambiguous (pass Null into
--     p_restrict_excl_sub_class) or exclusive (pass "Y" into p_restrict_excl_sub_class)
--
PROCEDURE create_inventory_item (p_rec_iit                 IN OUT nm_inv_items%ROWTYPE
                                ,p_effective_date          IN     date                          DEFAULT nm3user.get_effective_date
                                ,p_route_ne_id             IN     nm_elements.ne_id%TYPE        DEFAULT NULL
                                ,p_start_ne_id             IN     nm_elements.ne_id%TYPE
                                ,p_start_offset            IN     number
                                ,p_end_ne_id               IN     nm_elements.ne_id%TYPE        DEFAULT NULL
                                ,p_end_offset              IN     number                        DEFAULT NULL
                                ,p_sub_class               IN     nm_elements.ne_sub_class%TYPE DEFAULT NULL
                                ,p_restrict_excl_sub_class IN     varchar2                      DEFAULT NULL
                                );
--
-- 8. This procedure will create the inventory item and locate it over the entire
--     area as contained within the passed NM_PLACEMENT_ARRAY
--
PROCEDURE create_inventory_item (p_rec_iit                 IN OUT nm_inv_items%ROWTYPE
                                ,p_effective_date          IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                                ,p_pl_arr                  IN     nm_placement_array
                                );
--
-- 9. This procedure will create the inventory item and locate it over the entire
--     area as contained within the passed NM_PLACEMENT
--
PROCEDURE create_inventory_item (p_rec_iit                 IN OUT nm_inv_items%ROWTYPE
                                ,p_effective_date          IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                                ,p_pl                      IN     nm_placement
                                );
--
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="locate_item">
--
-- 1. This procedure will locate the inventory item along the entire length
--     of the network element (only suitable for continous items) specified by NE_UNIQUE
--
PROCEDURE locate_item (p_iit_ne_id                  IN     nm_inv_items.iit_ne_id%TYPE
                      ,p_effective_date             IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                      ,p_append_or_replace_existing IN varchar2 DEFAULT c_replace
                      ,p_element_ne_unique          IN     nm_elements.ne_unique%TYPE
                      ,p_element_ne_nt_type         IN     nm_elements.ne_nt_type%TYPE      DEFAULT NULL
                      );
--
-- 2. This procedure will locate the inventory item along the entire length
--     of the network element (only suitable for continous items) specified by the internal NE_ID
--
PROCEDURE locate_item (p_iit_ne_id                  IN     nm_inv_items.iit_ne_id%TYPE
                      ,p_effective_date             IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                      ,p_append_or_replace_existing IN     varchar2                         DEFAULT c_replace
                      ,p_element_ne_id              IN     nm_elements.ne_id%TYPE
                      );
--
-- 3. This procedure will locate the inventory item between the specified MPs
--     of the network element specified by the NE_UNIQUE
--    p_element_end_mp does not need to be specified for POINT inventory items
--
PROCEDURE locate_item (p_iit_ne_id                  IN     nm_inv_items.iit_ne_id%TYPE
                      ,p_effective_date             IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                      ,p_append_or_replace_existing IN     varchar2                         DEFAULT c_replace
                      ,p_element_ne_unique          IN     nm_elements.ne_unique%TYPE
                      ,p_element_ne_nt_type         IN     nm_elements.ne_nt_type%TYPE      DEFAULT NULL
                      ,p_element_begin_mp           IN     nm_members.nm_begin_mp%TYPE
                      ,p_element_end_mp             IN     nm_members.nm_end_mp%TYPE        DEFAULT NULL
                      );
--
-- 4. This procedure will locate the inventory item between the specified MPs
--     of the network element specified by the internal NE_ID
--    p_element_end_mp does not need to be specified for POINT inventory items
--
PROCEDURE locate_item (p_iit_ne_id                  IN     nm_inv_items.iit_ne_id%TYPE
                      ,p_effective_date             IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                      ,p_append_or_replace_existing IN     varchar2                         DEFAULT c_replace
                      ,p_element_ne_id              IN     nm_elements.ne_id%TYPE
                      ,p_element_begin_mp           IN     nm_members.nm_begin_mp%TYPE
                      ,p_element_end_mp             IN     nm_members.nm_end_mp%TYPE        DEFAULT NULL
                      );
--
-- 5. This procedure will locate the inventory item over the entire
--     area as contained within the Saved Network Extent - identified by the internal NSE_ID
--
PROCEDURE locate_item (p_iit_ne_id                  IN     nm_inv_items.iit_ne_id%TYPE
                      ,p_effective_date             IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                      ,p_append_or_replace_existing IN     varchar2                         DEFAULT c_replace
                      ,p_nse_id                     IN     nm_saved_extents.nse_id%TYPE
                      );
--
-- 6. This procedure will locate the inventory item on a specified route
--     from datum offset to datum offset allowing specification of subclass either when ambiguous (pass Null into
--     p_restrict_excl_sub_class) or exclusive (pass "Y" into p_restrict_excl_sub_class)
--
PROCEDURE locate_item (p_iit_ne_id                  IN     nm_inv_items.iit_ne_id%TYPE
                      ,p_effective_date             IN     date                          DEFAULT nm3user.get_effective_date
                      ,p_append_or_replace_existing IN     varchar2                      DEFAULT c_replace
                      ,p_route_ne_id                IN     nm_elements.ne_id%TYPE        DEFAULT NULL
                      ,p_start_ne_id                IN     nm_elements.ne_id%TYPE
                      ,p_start_offset               IN     number
                      ,p_end_ne_id                  IN     nm_elements.ne_id%TYPE        DEFAULT NULL
                      ,p_end_offset                 IN     number                        DEFAULT NULL
                      ,p_sub_class                  IN     nm_elements.ne_sub_class%TYPE DEFAULT NULL
                      ,p_restrict_excl_sub_class    IN     varchar2                      DEFAULT NULL
                      );
--
-- 7. This procedure will locate the inventory item over the entire
--     area as contained within the passed NM_PLACEMENT_ARRAY
--
PROCEDURE locate_item (p_iit_ne_id                  IN     nm_inv_items.iit_ne_id%TYPE
                      ,p_effective_date             IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                      ,p_append_or_replace_existing IN     varchar2                         DEFAULT c_replace
                      ,p_pl_arr                     IN     nm_placement_array
                      );
--
-- 8. This procedure will locate the inventory item over the entire
--     area as contained within the passed NM_PLACEMENT
--
PROCEDURE locate_item (p_iit_ne_id                  IN     nm_inv_items.iit_ne_id%TYPE
                      ,p_effective_date             IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                      ,p_append_or_replace_existing IN     varchar2                         DEFAULT c_replace
                      ,p_pl                         IN     nm_placement
                      );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="end_date_item">
-- This procedure end-dates the specified inventory item on a specified date
--
PROCEDURE end_date_item (p_iit_ne_id                  IN     nm_inv_items.iit_ne_id%TYPE
                        ,p_effective_date             IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                        );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="end_date_item_location">
-- This procedure end-dates the specified inventory item's location on a specified date
--
PROCEDURE end_date_item_location (p_iit_ne_id                  IN     nm_inv_items.iit_ne_id%TYPE
                                 ,p_effective_date             IN     nm_inv_items.iit_start_date%TYPE DEFAULT nm3user.get_effective_date
                                 );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="copy_item">
--
-- This procedure creates a copy of the specified inventory item. For hierarchical
-- items all child items will also be copied.
--
--  pi_item_to_copy  is the id of the inventory item to copy.
--
--  pi_new_pk        is the primary key for the new item. This can be NULL if the primary key
--                   is not a flexible attribute for the inventory type.
--
--  pi_copy_location determines whether the location of the item (and its children) is
--                   copied.
--
--  pi_cascade_xsp   determines whether the XSP of the item is cascaded to new child items.
--
--  pi_cascade_excl  determines whether exclusive attributes are copied to new child items.
--
--  pi_cascade_au    determines whether the admin unit of the parent item is cascaded to new
--                   child items.
--
PROCEDURE copy_item(pi_item_to_copy   IN nm_inv_items.iit_ne_id%TYPE
                   ,pi_new_pk         IN nm_inv_items.iit_primary_key%TYPE
                   ,pi_effective_date IN date DEFAULT nm3user.get_effective_date
                   ,pi_copy_location  IN boolean DEFAULT TRUE
                   ,pi_cascade_xsp    IN boolean DEFAULT TRUE
                   ,pi_cascade_excl   IN boolean DEFAULT TRUE
                   ,pi_cascade_au     IN boolean DEFAULT TRUE
                   );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PRAGMA>
   PRAGMA RESTRICT_REFERENCES (get_version, rnds, wnps, wnds);
   PRAGMA RESTRICT_REFERENCES (get_body_version, rnds, wnps, wnds);
--</PRAGMA>
--
-----------------------------------------------------------------------------
--
END nm3api_inv;
/
