CREATE OR REPLACE PACKAGE nm3jobs AS
--<PACKAGE>
-----------------------------------------------------------------------------
--
--   SCCS Identifiers :-
--
--       sccsid           : @(#)nm3sdo.pkh 1.21 01/31/07
--       Module Name      : nm3sdo.pkh
--       Date into SCCS   : 07/01/31 13:45:09
--       Date fetched Out : 07/06/13 14:13:30
--       SCCS Version     : 1.21
--
--   Author : A Edwards
--
--   NM3 DBMS_SCHEDULER wrapper
--
-----------------------------------------------------------------------------
-- Copyright (c) exor corporation ltd, 2004
-----------------------------------------------------------------------------
----
--</PACKAGE>
--all global package variables here
--<GLOBVAR>
-- g_sccsid is the SCCS_ID
-- Constants
  g_sccsid           CONSTANT VARCHAR2(80) := '"$Revision:   3.0  $"';
--
-- Some invervals
--
  g_daily                CONSTANT varchar2(100)  := 'freq=daily;';
  g_midnight             CONSTANT varchar2(100)  := 'freq=daily; byhour=0; byminute=0; bysecond=0;';
  g_six_am               CONSTANT varchar2(100)  := 'freq=daily; byhour=6; byminute=0; bysecond=0;';
  g_hourly               CONSTANT varchar2(100)  := 'freq=hourly; byminute=0; bysecond=0;';
  g_minute               CONSTANT varchar2(100)  := 'freq=minutely; bysecond=0;';
  g_every_monday_9am     CONSTANT varchar2(100)  := 'freq=weekly; byday=mon; byhour=9; byminute=0; bysecond=0;';
  g_first_mon_quarterly  CONSTANT varchar2(100)  := 'freq=monthly; bymonth=1,4,7,10; byday=1mon;';
-----------------------------------------------------------------------------
--
--<PROC NAME="GET_VERSION">
-- This function returns the current SCCS version
  FUNCTION get_version RETURN VARCHAR2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="GET_BODY_VERSION">
-- This function returns the current SCCS version of the package body
  FUNCTION get_body_version RETURN VARCHAR2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="CREATE_JOB">
--   This procedure submits a job
--
--     pi_job_name           - Pass in a unique job name (no spaces)
--     pi_job_action         - Pass in the PLSQL call to packaged procedure etc
--     pi_repeat_interval    - 
--       You can use some example intervals
--       ==========================================================
--         g_daily                   | Daily
--         g_midnight                | Midnight
--         g_six_am                  | 6.00AM Each Day
--         g_hourly                  | Hourly
--         g_minute                  | Each Minute
--         g_every_monday_9am        | Every Day At 9.00AM
--         g_first_mon_quarterly     | Each Monday Every Quarter
--       ==========================================================
--     pi_comments           - Pass in a text comment to assoicate with the Job
--     pi_job_type           - Defaulted to PLSQL_BLOCK
--     pi_start_date         - Defaulted to today
--     pi_end_date           - Defaulted to never
--     pi_enabled            - Defaulted to enabled
--
--
  PROCEDURE create_job
              ( pi_job_name        IN VARCHAR2
              , pi_job_action      IN VARCHAR2
              , pi_repeat_interval IN VARCHAR2  DEFAULT g_midnight
              , pi_comments        IN VARCHAR2  DEFAULT NULL
              , pi_job_type        IN VARCHAR2  DEFAULT 'PLSQL_BLOCK'
              , pi_start_date      IN TIMESTAMP DEFAULT SYSTIMESTAMP
              , pi_end_date        IN TIMESTAMP DEFAULT NULL
              , pi_enabled         IN BOOLEAN   DEFAULT TRUE );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="CREATE_JOB">
-- Run a job immediately
  PROCEDURE run_job ( pi_job_name            IN VARCHAR2
                    , pi_use_current_session IN BOOLEAN DEFAULT TRUE );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="STOP_JOB">
-- Run a job immediately
  PROCEDURE stop_job ( pi_job_name IN VARCHAR2
                     , pi_force    IN BOOLEAN DEFAULT FALSE);
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="DROP_JOB">
-- Drop a job
  PROCEDURE drop_job ( pi_job_name IN VARCHAR2
                     , pi_force    IN BOOLEAN DEFAULT FALSE);
--</PROC>
--
-----------------------------------------------------------------------------
--
END nm3jobs;
/