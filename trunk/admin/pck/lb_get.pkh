CREATE OR REPLACE PACKAGE lb_get
AS
    --   PVCS Identifiers :-
    --
    --       pvcsid           : $Header:   //new_vm_latest/archives/lb/admin/pck/lb_get.pkh-arc   1.20   Jul 30 2018 08:47:40   Rob.Coupe  $
    --       Module Name      : $Workfile:   lb_get.pkh  $
    --       Date into PVCS   : $Date:   Jul 30 2018 08:47:40  $
    --       Date fetched Out : $Modtime:   Jul 30 2018 08:46:42  $
    --       PVCS Version     : $Revision:   1.20  $
    --
    --   Author : R.A. Coupe
    --
    --   Location Bridge package for handling minor set operators
    --
    -----------------------------------------------------------------------------
    -- Copyright (c) 2015 Bentley Systems Incorporated. All rights reserved.
    ----------------------------------------------------------------------------
    --
    g_sccsid   CONSTANT VARCHAR2 (2000) := '$Revision:   1.20  $';

    --
    FUNCTION get_version
        RETURN VARCHAR2;

    FUNCTION get_body_version
        RETURN VARCHAR2;

    FUNCTION get_obj_RPt_tab (p_refnt_tab     IN lb_RPt_tab,
                              p_obj_type      IN VARCHAR2,
                              p_obj_id        IN INTEGER,
                              p_intsct        IN VARCHAR2 DEFAULT 'FALSE',
                              p_lb_only       IN VARCHAR2 DEFAULT 'FALSE',
                              p_whole_only    IN VARCHAR2 DEFAULT 'FALSE',
                              p_cardinality   IN INTEGER)
        RETURN lb_RPt_tab;

    FUNCTION get_refnt_RPt_tab_from_geom (
        p_geom          IN MDSYS.sdo_geometry,
        p_theme_id      IN nm_themes_all.nth_theme_id%TYPE,
        p_mask_array    IN VARCHAR2 DEFAULT 'ANYINTERACT',
        p_cardinality   IN INTEGER)
        RETURN lb_RPt_tab;

    FUNCTION get_refnt_RPt_tab_from_geom (
        p_geom          IN MDSYS.sdo_geometry,
        p_inv_type      IN lb_types.lb_exor_inv_type%TYPE,
        p_cardinality   IN INTEGER)
        RETURN lb_RPt_tab;


    FUNCTION get_refnt_RPt_tab_from_nspe (
        p_nspe_id       IN INTEGER,
        p_theme_id      IN nm_themes_all.nth_theme_id%TYPE,
        p_mask_array    IN VARCHAR2 := 'ANYINTERACT',
        p_cardinality   IN INTEGER)
        RETURN lb_RPt_tab;


    FUNCTION get_RPT_geom_tab_from_RPt (p_rpt_tab IN lb_RPt_tab)
        RETURN lb_RPt_geom_tab;

    FUNCTION get_lb_RPt_geom_tab_from_geom (
        p_geom         IN MDSYS.sdo_geometry,
        p_theme_id     IN nm_themes_all.nth_theme_id%TYPE,
        p_mask_array      VARCHAR2 := 'coveredby+inside+anyinteract')
        RETURN lb_RPt_geom_tab;

    FUNCTION get_x_RPt_tab_from_geom (
        p_geom         IN MDSYS.sdo_geometry,
        p_theme_id     IN nm_themes_all.nth_theme_id%TYPE,
        p_mask_array      VARCHAR2 := 'coveredby+inside+anyinteract')
        RETURN lb_RPt_tab;

    FUNCTION get_x_RPt_geom_tab_from_geom (
        p_geom         IN MDSYS.sdo_geometry,
        p_theme_id     IN nm_themes_all.nth_theme_id%TYPE,
        p_mask_array      VARCHAR2 := 'coveredby+inside+anyinteract')
        RETURN lb_RPt_geom_tab;

    FUNCTION get_obj_ids_at_loc (pi_rpt_tab     IN lb_rpt_tab,
                                 pi_obj_type    IN VARCHAR2,
                                 p_lb_only      IN VARCHAR2 DEFAULT 'FALSE',
                                 p_whole_only   IN VARCHAR2 DEFAULT 'FALSE',
                                 CARDINALITY    IN INTEGER)
        RETURN lb_obj_id_tab;

    FUNCTION get_obj_ids_at_loc (pi_ne_id      IN INTEGER,
                                 pi_begin_mp      NUMBER,
                                 pi_end_mp        NUMBER)
        RETURN lb_obj_id_tab;

		
		
--------------------------------------------------------------------------------
/*
Function lb_get.get_lb_rpt_tab

Purpose To provide a means of searching for and retrieving a set of similar structured location data out of an Exor and Location Bridge database. 
Data is retrieved in a nested table of type LB_RPT_TAB. This encapsulates all of the information relating to the locations.
The argument list is based on the LB_RPT (LB reference point). This object consists of some data which is derivable from the database, 
given other attributes of the type (denormalized) and some attributes of this object such as seg_id and seq_id are relative to the data being 
retrieved and so are ignored in the search.
Arguments
p_refnt			INTEGER		A reference to a linear network element in the Exor NM_ELEMENTS table, either a datum or linear group.
p_refnt_type	INTEGER		A reference to the network type of the referent, this integer relates directly to the nlt_id of the network type in the NM_LINEAR_TYPES table
p_obj_type		VARCHAR2	The exor asset type of the locations to be retrieved
p_obj_id		INTEGER		The object-id of the asset whose location is to be retrieved
p_seg_id		INTEGER		A pointer to the segment number of the location. A difference in segment numbers indicate a discontinuity of measure or a point 
							of loss of connectivity over the network. This is unused in the query.
p_seq_id		INTEGER		A pointer to the sequence number of the location. Sequence numbers are incremented to indicate the order of the 
							location of the asset thus indicating a direction. This is relative to the network data being retrieved and so is ignored in the query.
p_dir_flag		INTEGER		A direction flag taking the value of plus or minus one indicating the asset direction relative to the network. 
							This is formed when the asset location is created. For an asset type whose location is persisted on a network datum, the value is inherited from the route direction flag if located relative to a route or is set to +1 if the location is created relative to a datum. It has no useful purpose in the query and is ignored.
p_start_m		NUMBER		The start measure relative to the referent. This provides a lower bound of the asset location within the query 
p_end_m			NUMBER		The end measure relative to the referent. This provides a upper bound of the asset location within the query
p_intsct		VARCHAR2	A flag to denote whether the returned location data should be that of the intersection of the asset location 
                            with the specified range. This is ignored if the range or referent is not entered. It takes the value of ‘TRUE’ or ‘FALSE’
p_m_unit		INTEGER		This is usually a denormalized reference to the Exor unit of measure of the network type referenced in the referent 
                            and referent type. Unit identifiers which are not the value of the network type being queried will indicate that the start and 
							end measures are converted into the natural unit of the network for the query to work
p_lb_only		VARCHAR2	A flag to indicate if asset data should be retrieved from the location bridge silo of location data. It takes the value of ‘TRUE’ 
                            or ‘FALSE’. If set to TRUE, the function will retrieve only those asset locations which are configured in Location Bridge 
							(for example those which relate directly to assets within eB ). If the value is set to ‘FALSE’ then the location data of 
							standard Exor assets will be retrieved. 
p_cardinality	INTEGER		An indicator of the number of rows expected. This allows statistics to be used by the Oracle optimizer in cases where the resultant 
                            nested table is joined to another table. This depends on the version of Oracle. A value of 10 is a reasonable 
							compromise but in later releases of Oracle, the value will be ignored as the optimizer uses the accumulated statistics of the 
							nested table at execution time.
		

The function relates to the LB_RPT object and returns a nested table of LB_RPT data as an object type (LB_RPT_TAB). This table holds much of what is important in relation to asset locations and is commonly used for further translations and manipulations of data in the nested table. The functions main arguments are optional although insufficient attribute data to formulate a sensible query will raise an exception and generate an error. 
•	If an argument is omitted, the function will attempt to make use of the database to normalize the information in the query. 
•	If a unit specifier is omitted, the natural unit of measure for the specified network referent or the network on which the asset type resides will be used. If a unit of measure is specified, the start and end measure will be converted to the natural unit of the network or asset type prior to execution of the query. 
•	As stated above, some of the data relates to attributes within the LB_RPT object and are currently unused and will be deprecated.
•	Here are some examples of the data being retrieved and example of some common translation functions applied to the query results.
•	If the referent type is omitted, the correct referent type will be generated on the output. 
•	Attempts to request an intersection without specifying a network reference will raise an exception ( ORA-20013: Use of the intersection or whole-only option is only valid when accompanied by a network reference).
•	Attempts to execute the query with insufficient arguments – neither object based nor network based will raise an exception (ORA-20012: No network or asset data provided to form the query).
•	If a referent is used and no start or end measure then the range is full range of the element supplied. 

*/
--------------------------------------------------------------------------------	
		
    FUNCTION get_lb_RPt_tab (p_refnt         IN INTEGER,
                             p_refnt_type    IN INTEGER,
                             p_obj_type      IN VARCHAR2,
                             p_obj_id        IN INTEGER,
                             p_seg_id        IN INTEGER,
                             p_seq_id        IN INTEGER,
                             p_dir_flag      IN INTEGER,
                             p_start_m       IN NUMBER,
                             p_end_m         IN NUMBER,
                             p_intsct        IN VARCHAR DEFAULT 'FALSE',
                             p_m_unit        IN INTEGER,
                             p_lb_only       IN VARCHAR2 DEFAULT 'FALSE',
                             p_whole_only    IN VARCHAR2 DEFAULT 'FALSE',
                             p_cardinality   IN INTEGER)
        RETURN lb_RPt_tab;

    FUNCTION g_of_g_search (p_group_id      IN INTEGER,
                            --                           p_asset_types   IN lb_asset_type_tab,
                            p_inv_type      IN VARCHAR2 DEFAULT NULL,
                            p_LB_only       IN VARCHAR2 DEFAULT 'TRUE',
                            p_whole_only    IN VARCHAR2 DEFAULT 'FALSE',
                            p_cardinality   IN INTEGER)
        RETURN lb_rpt_tab;


    FUNCTION get_lb_RPt_cur (p_refnt         IN INTEGER,
                             p_refnt_type    IN INTEGER,
                             p_obj_type      IN VARCHAR2,
                             p_obj_id        IN INTEGER,
                             p_seg_id        IN INTEGER,
                             p_seq_id        IN INTEGER,
                             p_dir_flag      IN INTEGER,
                             p_start_m       IN NUMBER,
                             p_end_m         IN NUMBER,
                             p_intsct        IN VARCHAR2 DEFAULT 'FALSE',
                             p_m_unit        IN INTEGER,
                             p_cardinality   IN INTEGER)
        RETURN SYS_REFCURSOR;

    --
    FUNCTION get_lb_RPt_r_tab (p_lb_RPt_tab        IN lb_RPt_tab,
                               p_linear_obj_type   IN VARCHAR2,
                               p_cardinality       IN INTEGER DEFAULT NULL)
        RETURN lb_RPt_tab;


    FUNCTION get_lb_xrpt_r_tab (p_lb_XRPt_tab       IN lb_XRPt_tab,
                                p_linear_obj_type   IN VARCHAR2,
                                p_cardinality       IN INTEGER DEFAULT NULL)
        RETURN lb_XRPt_tab;

    FUNCTION get_asset_ids_at_loc (
        pi_rpt_tab     IN lb_rpt_tab,
        pi_obj_type    IN VARCHAR2,
        p_lb_only      IN VARCHAR2 DEFAULT 'FALSE',
        p_whole_only   IN VARCHAR2 DEFAULT 'FALSE',
        CARDINALITY    IN INTEGER)
        RETURN lb_obj_id_tab;


    FUNCTION get_lb_RPt_D_tab (p_lb_RPt_tab IN lb_RPt_tab)
        RETURN lb_RPt_tab;

    FUNCTION get_lb_XRPt_D_tab (p_lb_XRPt_tab IN lb_XRPt_tab)
        RETURN lb_XRPt_tab;


    FUNCTION get_obj_id_as_rpt_tab (pi_obj_id     IN INTEGER,
                                    pi_obj_type   IN VARCHAR2)
        RETURN lb_rpt_tab;

    FUNCTION get_ft_rpt_tab (p_rpt_tab      IN lb_rpt_tab,
                             p_table_name   IN VARCHAR2,
                             p_inv_type     IN VARCHAR2,
                             p_key          IN VARCHAR2,
                             p_ne_key       IN VARCHAR2,
                             p_start_col    IN VARCHAR2,
                             p_end_col      IN VARCHAR2)
        RETURN lb_rpt_tab;

    FUNCTION get_geom_from_lrefs (pi_lrefs IN nm_lref_array)
        RETURN SDO_GEOMETRY;
END;
/