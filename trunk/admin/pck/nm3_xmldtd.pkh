CREATE OR REPLACE PACKAGE nm3_xmldtd AS
--<PACKAGE>
-------------------------------------------------------------------------
--   PVCS Identifiers :-
--
--       PVCS id          : $Header:   //vm_latest/archives/nm3/admin/pck/nm3_xmldtd.pkh-arc   2.2   Jul 04 2013 15:10:54   James.Wadsworth  $
--       Module Name      : $Workfile:   nm3_xmldtd.pkh  $
--       Date into PVCS   : $Date:   Jul 04 2013 15:10:54  $
--       Date fetched Out : $Modtime:   Jul 04 2013 14:25:22  $
--       Version          : $Revision:   2.2  $
--       Based on SCCS version : 1.5
---------------------------------------------------------------------------
--   Author : A.N. Other
--
--   xmldtd
--
-----------------------------------------------------------------------------
--   Copyright (c) 2013 Bentley Systems Incorporated. All rights reserved.
-----------------------------------------------------------------------------
--</PACKAGE>
--<GLOBVAR>
--  g_sccsid is the SCCS ID for the package
  g_sccsid      CONSTANT  VARCHAR2(2000) := '$Revision:   2.2  $';
  
-- Constants
  c_element  VARCHAR(20)   := '<!ELEMENT ';
  c_attlist  VARCHAR2(20)  := '<!ATTLIST ';
  c_space    VARCHAR2(1)   := ' ';
  c_comma    VARCHAR2(1)   := ',';
  c_open     VARCHAR2(1)   := '(';
  c_close    VARCHAR2(1)   := ')';
  c_plus     VARCHAR2(1)   := '+'; --declares that the child element must occur one or more times inside the parent element.
  c_star     VARCHAR2(1)   := '*'; --declares that the child element can occur zero OR more times inside the parent element.
  c_qmark    VARCHAR2(1)   := '?'; --declares that the child element can occur zero or one times inside the parent element.
  c_quote    VARCHAR2(1)   := '''';
  c_bar      VARCHAR2(1)   := '|';  
  c_slash    VARCHAR2(1)   := '/';
  c_nl       VARCHAR2(10)  := CHR(10);
  c_start    VARCHAR2(20)  := '<';  
  c_end      VARCHAR2(20)  := '>'||c_nl;
  c_pcdata   VARCHAR2(20)  := '#PCDATA';
  c_cdata    VARCHAR2(20)  := ' CDATA ';
  c_required VARCHAR2(20) := '#REQUIRED';
  c_implied  VARCHAR2(20)  := '#IMPLIED';
  c_id       VARCHAR2(20)  := 'ID';
  c_version  VARCHAR2(50)  := '<?xml version="1.0" encoding="UTF-8"?>'||c_nl; --'<?xml version="1.0"?>';
  c_generated_by  VARCHAR2(100) := '<!--DTD generated by exor corp. (http://www.exorcorp.com)-->'||c_nl;
  c_basic_type VARCHAR2(50) := c_space||c_open||c_pcdata||c_close||c_end;


--</GLOBVAR>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="GET_VERSION">
-- This function returns the current SCCS version
FUNCTION get_version RETURN VARCHAR2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="GET_BODY_VERSION">
-- This function returns the current SCCS version of the package body
FUNCTION get_body_version RETURN VARCHAR2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_nm_inv_type_dtd">
-- This procedure will create specified xmldtd file for nm_inv_types 
--
PROCEDURE create_nm_inv_type_dtd ( file_location IN VARCHAR2
                                 , file_name IN VARCHAR2 );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="validate_dtd_file">
-- This procedure will xmlparse a dtd file  
--
PROCEDURE validate_dtd_file ( file_location IN VARCHAR2
                            , file_name IN VARCHAR2 );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_simple_dtd">
-- This procedure will create a simple dtd based on the single table passed.   
--
PROCEDURE create_simple_dtd ( p_table IN VARCHAR2
                             ,file_location IN VARCHAR2
                             ,file_name IN VARCHAR2 );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="load_and_save">
-- load a clob from a file and save to a table 'ian_xml'   
--
PROCEDURE load_and_save ( file_location IN VARCHAR2
                         ,file_name     IN VARCHAR2
                         ,p_name        IN VARCHAR2
                         );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="check_xml_with_dtd">
-- Uses the parser to validate the an xml clob with a dtd clob   
--
FUNCTION check_xml_with_dtd( p_xml CLOB, p_dtd CLOB, p_root_element VARCHAR2 )
RETURN xmldom.domdocument;
--</PROC>


-----------------------------------------------------------------------------
--
--<PROC NAME="create_inv_types_xml">
-- Creates a xml file for the specified inv type 
PROCEDURE create_inv_types_xml ( file_location IN VARCHAR2
                               , file_name IN VARCHAR2
                               , p_item_types IN VARCHAR2 
                               ); 
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_inv_types_xml">
-- Creates a xml file for the specified inv types in the pl/sqlarray 
PROCEDURE create_inv_types_xml ( file_location IN VARCHAR2
                               , file_name IN VARCHAR2 
                               , p_item_types IN nm3type.tab_varchar30
                               ); 
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="insert_xmlclob_to_table">
-- Inserts an xml clob into the nm_xml table, specifying the column names
FUNCTION  insert_xmlclob_to_table( xmldoc IN CLOB
                                  ,p_table VARCHAR2
                                  ,p_cols nm3type.tab_varchar30
                                  ,p_rowsettag VARCHAR2 DEFAULT NULL
                                  ,p_rowtag VARCHAR2 DEFAULT NULL
                                  ,p_date_format VARCHAR2 DEFAULT 'dd-MMM-yyyy'
                                 ) RETURN NUMBER;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="insert_xmlclob_to_table">
-- T Inserts an xml clob into the nm_xml table
FUNCTION  insert_xmlclob_to_table( xmldoc IN CLOB
                                  ,p_table VARCHAR2
                                  ,p_rowsettag VARCHAR2 DEFAULT NULL
                                  ,p_rowtag VARCHAR2 DEFAULT NULL
                                  ,p_date_format VARCHAR2 DEFAULT 'dd-MMM-yyyy'
                                 ) RETURN NUMBER;
--</PROC>
--                                                                  
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_xml">
-- get the xml specified
FUNCTION get_xml( p_type VARCHAR2, p_descr VARCHAR2 )RETURN CLOB ;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="read_xmldoc">
-- displays the contents of an xmldoc in nm_dbug
PROCEDURE read_xmldoc(doc xmldom.domdocument, p_tagname VARCHAR2 DEFAULT '*');
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_inv_items_dtd">
-- Create a file of inv items dtd for the inv types specified
PROCEDURE create_inv_items_dtd;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_inv_items_dtd">
-- Create a file of inv items dtd for the inv types specified
PROCEDURE create_inv_items_dtd( p_inv_type nm3type.tab_varchar30
                               ,p_filename VARCHAR2
                               ,p_filedir  VARCHAR2
                              );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_inv_items_dtd">
-- Create a file of inv items dtd
PROCEDURE create_inv_items_dtd( p_inv_type IN nm3type.tab_varchar30
                               ,p_dtd IN OUT CLOB
                              );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_inv_items_dtd">
-- Create a file of inv items dtd
PROCEDURE create_inv_items_dtd( p_inv_type nm3type.tab_varchar30 );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_nodepoint_dtd">
-- Create the dtd for the nodes/points import
PROCEDURE create_nodepoint_dtd;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_datum_elements_dtd">
-- Create a DTD for the datum elements
PROCEDURE create_datum_elements_dtd;     
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_groups_dtd">
-- Create a DTD for groups of elements
PROCEDURE create_groups_dtd;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="parsedtdclob">
-- Parse a DTD to ensure that it is well formed and valid.
-- It will raise exceptions if not valid.
PROCEDURE parsedtdclob ( p_dtd IN CLOB
                        ,p_root VARCHAR2 DEFAULT NULL
                       );               
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="save_to_table">
-- Save a clob to the nm_xml table, giving a type DTD/XML
-- and a description
PROCEDURE save_to_table( p_xmldoc CLOB
                        ,p_type VARCHAR2
                        ,p_name VARCHAR2
                       );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="parseclob">
-- parse and XML clob to ensure that it is well formed and valid
FUNCTION parseclob( p_xml CLOB)RETURN xmldom.domdocument;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_attribute_and_value">
-- For a node return the attribute value pairs 
PROCEDURE get_attribute_and_value( p_node xmldom.domnode 
                                  ,p_attribute IN OUT nm3type.tab_varchar2000
                                  ,p_attrib_value IN OUT nm3type.tab_varchar2000
                                 );                  
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_attribute_and_value">
-- for a node output attribut/value pairs to nm_dbug
PROCEDURE get_attribute_and_value( p_node IN xmldom.domnode );
--</PROC>
--
-----------------------------------------------------------------------------
--
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_inv_items_xml">
--create xml for inv items 
--
PROCEDURE create_inv_items_xml( p_inv_type IN nm3type.tab_varchar30 
                               ,p_inv_xml IN OUT CLOB);
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_inv_items_xml">
-- create xml for inv items 
PROCEDURE create_inv_items_xml( p_inv_type nm3type.tab_varchar30
                               ,p_filename VARCHAR2
                               ,p_filedir  VARCHAR2
                              );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_inv_items_xml">
-- create xml for inv items 
PROCEDURE create_inv_items_xml( p_inv_type nm3type.tab_varchar30 );                               
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="show_xml">
-- Displays xml with a style sheet.
-- The xml and the style sheet must exist in nm3_upload_files
--
PROCEDURE show_xml( pi_xml_name    NM_UPLOAD_FILES.name%TYPE DEFAULT NULL
                   ,pi_style_sheet NM_UPLOAD_FILES.name%TYPE DEFAULT NULL
                  );
--</PROC>
--
-----------------------------------------------------------------------------
--
--
-----------------------------------------------------------------------------
--
--<PROC NAME="dummy_function">
-- This is a sample function to illustrate the tagging for comments
--FUNCTION dummy_function RETURN varchar2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PRAGMA>
   PRAGMA RESTRICT_REFERENCES (get_version, rnds, wnps, wnds);
   PRAGMA RESTRICT_REFERENCES (get_body_version, rnds, wnps, wnds);
--</PRAGMA>
--
-----------------------------------------------------------------------------
--
END nm3_xmldtd;
/
