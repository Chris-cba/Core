create or replace package nm3inv_composite2 as
--
--   PVCS Identifiers :-
--
--       sccsid           : $Header:   //vm_latest/archives/nm3/admin/pck/nm3inv_composite2.pkh-arc   2.0   Jul 23 2007 14:30:44   smarshall  $
--       Module Name      : $Workfile:   nm3inv_composite2.pkh  $
--       Date into PVCS   : $Date:   Jul 23 2007 14:30:44  $
--       Date fetched Out : $Modtime:   Jul 23 2007 14:30:24  $
--       PVCS Version     : $Revision:   2.0  $
--       Based on sccs version : 
--
--   Author : Priidu
--
--   Composite Inventory package with bulk processing
--
-----------------------------------------------------------------------------
--   Copyright (c) exor corporation ltd, 2007
-----------------------------------------------------------------------------
  g_sccsid      constant  varchar2(2000) := '"$Revision:   2.0  $"';

  subtype id_type is number(9);
  subtype mp_type is number;

  type attrib_rec is record (
     name       varchar2(30)
    ,value      varchar2(500)
    ,sql_value  varchar2(500)
  );
  type attrib_tbl is table of attrib_rec index by binary_integer;

  -- record and table to take in the selected route/extent
  type gaz_rec is record (
     id id_type
    ,type varchar2(10)
  );
  type gaz_tbl is table of gaz_rec index by binary_integer;
  g_empty_gaz_tbl gaz_tbl;

--
   c_composite_nic_category CONSTANT nm_inv_categories.nic_category%TYPE := 'D';
--
   g_block               nm3type.tab_varchar32767;
   g_nmnd_nit_inv_type   nm_mrg_nit_derivation.nmnd_nit_inv_type%TYPE    := nm3type.c_nvl;
   g_nms_mrg_job_id      nm_mrg_sections.nms_mrg_job_id%TYPE             := -1;
   g_nms_mrg_section_id  nm_mrg_sections.nms_mrg_section_id%TYPE         := -1;
   g_rec_iit             nm_inv_items%ROWTYPE;
   g_parse_only          BOOLEAN;
   g_nmnd_is_point       BOOLEAN;
   g_last_update_date    DATE;
   g_rec_nmnd            nm_mrg_nit_derivation%ROWTYPE;
   g_where_clause_failed BOOLEAN;
--
   g_mrg_record_name     CONSTANT VARCHAR2(3) := 'mrg';
   g_inv_record_name     CONSTANT VARCHAR2(3) := 'inv';
--
   c_bonfire_night       CONSTANT DATE        := TO_DATE('05111605','DDMMYYYY');
--
   g_tab_mail_text       nm3type.tab_varchar32767;
   g_tab_error_item      nm3type.tab_varchar32767;
   g_tab_error_locn      nm3type.tab_varchar32767;
   g_tab_error_errm      nm3type.tab_varchar32767;

--
   g_string_temp         nm3type.max_varchar2;
   g_rec_iit_temp        nm_inv_items%ROWTYPE;
--
   g_inv_count           PLS_INTEGER;
   g_error_count         PLS_INTEGER;
--
--</GLOBVAR>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="GET_VERSION">
-- This function returns the current SCCS version
FUNCTION get_version RETURN varchar2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="GET_BODY_VERSION">
-- This function returns the current SCCS version of the package body
FUNCTION get_body_version RETURN varchar2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="check_nmnd">
PROCEDURE check_nmnd (p_rec_nmnd nm_mrg_nit_derivation%ROWTYPE);
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="check_no_refresh_running">
PROCEDURE check_no_refresh_running (p_nmnd_nit_inv_type nm_mrg_nit_derivation.nmnd_nit_inv_type%TYPE);
--</PROC>
--
-----------------------------------------------------------------------------
--
PROCEDURE validate_nmnd (p_nmnd_nit_inv_type     nm_mrg_nit_derivation.nmnd_nit_inv_type%TYPE
                        ,p_check_all_mand_fields BOOLEAN DEFAULT TRUE
                        );
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_nmnd">
FUNCTION get_nmnd (pi_nmnd_nit_inv_type nm_mrg_nit_derivation.nmnd_nit_inv_type%TYPE
                  ) RETURN nm_mrg_nit_derivation%ROWTYPE;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="nmid_b_iu_stm_trg">
PROCEDURE nmid_b_iu_stm_trg;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="nmid_b_iu_row_trg">
PROCEDURE nmid_b_iu_row_trg (p_rec_nmid nm_mrg_ita_derivation%ROWTYPE);
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="nmid_a_iu_stm_trg">
PROCEDURE nmid_a_iu_stm_trg;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="check_au_derivation">
PROCEDURE check_au_derivation (pi_nmid_ita_inv_type nm_mrg_ita_derivation.nmid_ita_inv_type%TYPE
                              ,pi_nmid_derivation   nm_mrg_ita_derivation.nmid_derivation%TYPE
                              );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_mrg_record_name">
FUNCTION get_mrg_record_name RETURN VARCHAR2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_inv_record_name">
FUNCTION get_inv_record_name RETURN VARCHAR2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="refresh_nmnd">
PROCEDURE refresh_nmnd (p_nmnd_nit_inv_type  nm_mrg_nit_derivation.nmnd_nit_inv_type%TYPE
                       ,p_effective_date     DATE    DEFAULT nm3user.get_effective_date
                       ,p_force_full_refresh BOOLEAN DEFAULT FALSE
                       );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_union_of_nte">

--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_bonfire_night">
FUNCTION get_bonfire_night RETURN DATE;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_not_null">
FUNCTION get_not_null (pi_ita_mandatory_yn VARCHAR2
                      ,pi_atc_nullable     VARCHAR2
                      ,pi_column_name      VARCHAR2
                      ,pi_nit_x_sect_allow VARCHAR2
                      ) RETURN VARCHAR2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="allowable_inv_column">
FUNCTION allowable_inv_column (p_column VARCHAR2) RETURN VARCHAR2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_composite_nic_category">
FUNCTION get_composite_nic_category RETURN nm_inv_categories.nic_category%TYPE;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="refresh_pending_nmnd">
PROCEDURE refresh_pending_nmnd (p_effective_date DATE DEFAULT nm3user.get_effective_date);
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="refresh_nmnd_as_job">
PROCEDURE refresh_nmnd_as_job (p_nmnd_nit_inv_type  nm_mrg_nit_derivation.nmnd_nit_inv_type%TYPE
                              ,p_effective_date     DATE    DEFAULT nm3user.get_effective_date
                              ,p_force_full_refresh BOOLEAN DEFAULT FALSE
                              );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="submit_refresh_pending_job">
PROCEDURE submit_refresh_pending_job (p_interval_days PLS_INTEGER DEFAULT 1);
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_nmu_id_for_hig_owner">
--  This function returns the NMU_ID for the mail user associated with the
--   application owner (or null if no email account associated)
FUNCTION get_nmu_id_for_hig_owner RETURN nm_mail_users.nmu_id%TYPE;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_dbms_job">
PROCEDURE create_dbms_job (pi_what              VARCHAR2
                          ,pi_when              DATE     DEFAULT SYSDATE
                          ,pi_next              VARCHAR2 DEFAULT Null
                          ,pi_allow_duplicate   BOOLEAN  DEFAULT FALSE
                          ,pi_commit_autonomous BOOLEAN  DEFAULT TRUE
                          );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="create_job_to_run_every_n_days">
PROCEDURE create_job_to_run_every_n_days (p_what          VARCHAR2
                                         ,p_interval_days PLS_INTEGER DEFAULT 1
                                         );
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_merge_view_alias">
-- Returns the value of g_mrg_record_name
FUNCTION get_merge_view_alias RETURN VARCHAR2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_inv_view_alias">
-- Returns the value of g_inv_record_name
FUNCTION get_inv_view_alias RETURN VARCHAR2;
--</PROC>
--
-----------------------------------------------------------------------------
--
--<PROC NAME="get_merge_results_view">
-- Returns the name of the V_MRG_xxxxx_SVL view which is used by composite
FUNCTION get_merge_results_view (p_nmq_id nm_mrg_query.nmq_id%TYPE) RETURN VARCHAR2;
--</PROC>
--
  
  procedure ins_iit_tmp_values(
     p_inv_type in nm_inv_types_all.nit_inv_type%type
    ,p_mrg_job_id in nm_mrg_query_results_all.nqr_mrg_job_id%type
    ,p_mrg_view in varchar2
    ,p_mrg_view_where in varchar2
    ,p_effective_date in date
    ,pt_attr in attrib_tbl
    ,p_sqlcount out number
  );
  
  procedure process_from_iit_tmp(
     p_inv_type in nm_inv_types_all.nit_inv_type%type
    ,p_mrg_job_id in id_type
    ,p_effective_date in date
    ,pt_attr in attrib_tbl
    ,p_iit_tmp_cardinality in number
    ,p_keep_history in boolean
    ,p_item_count out pls_integer
    ,p_member_count out pls_integer
  );
  
  
  
  procedure do_rebuild(
     p_op_context in pls_integer
    ,p_inv_type in nm_inv_types_all.nit_inv_type%type
    ,p_nmq_id in nm_mrg_query_all.nmq_id%type
    ,p_effective_date in date
    ,p_admin_unit_id in nm_admin_units_all.nau_admin_unit%type
    ,p_admin_id in hig_users.hus_user_id%type
    ,p_mrg_view in varchar2
    ,p_mrg_view_where in varchar2
    ,pt_unique_attr in attrib_tbl
    ,p_keep_history in boolean
    ,p_send_mail in boolean
    ,p_nt_type in nm_types.nt_type%type
    ,p_ngt_group_type in nm_group_types_all.ngt_group_type%type
    ,pt_ne in nm_id_tbl
    ,pt_nse in nm_id_tbl
    ,p_ignore_poe in boolean
  );
  
  
  procedure call_rebuild(
     p_dbms_job_no in binary_integer
    ,p_inv_type in nm_inv_types_all.nit_inv_type%type
    ,p_effective_date in date
    ,p_send_mail in boolean default true
    ,p_ne_delim in varchar2 default null
    ,p_nse_delim in varchar2 default null
    ,p_attr1 in varchar2 default null
    ,p_value1 in varchar2 default null
    ,p_attr2 in varchar2 default null
    ,p_value2 in varchar2 default null
    ,p_attr3 in varchar2 default null
    ,p_value3 in varchar2 default null
  );
  
  
  -- This returns the plsql code block to be submitted with dbms_job
  function sql_dbms_job_what(
     p_inv_type in nm_inv_types_all.nit_inv_type%type
    ,p_effective_date in date
    ,p_send_mail in boolean default true
    ,p_ne_delim in varchar2 default null
    ,p_nse_delim in varchar2 default null
    ,p_attr1 in varchar2 default null
    ,p_value1 in varchar2 default null
    ,p_attr2 in varchar2 default null
    ,p_value2 in varchar2 default null
    ,p_attr3 in varchar2 default null
    ,p_value3 in varchar2 default null
  ) return varchar2;
  
  function sql_dbms_job_what_hint(
     p_inv_type in nm_inv_types_all.nit_inv_type%type
    ,p_interval in varchar2
  ) return varchar2;
  
  
  procedure submit_job(
     p_job out binary_integer
    ,p_what_hint in varchar2
    ,p_what in varchar2
    ,p_next_date in date
    ,p_interval in varchar2
  );
  
  
  function get_progress_text(
     p_inv_type in nm_inv_types_all.nit_inv_type%type
    ,p_job_no in binary_integer
  ) return varchar2;
  

end;

/
