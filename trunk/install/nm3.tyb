--
--   PVCS Identifiers :-
--
--       PVCS id          : $Header:   //vm_latest/archives/nm3/install/nm3.tyb-arc   2.1   Jul 04 2013 13:55:16   James.Wadsworth  $
--       Module Name      : $Workfile:   nm3.tyb  $
--       Date into PVCS   : $Date:   Jul 04 2013 13:55:16  $
--       Date fetched Out : $Modtime:   Jul 04 2013 13:37:04  $
--       Version          : $Revision:   2.1  $
--
-----------------------------------------------------------------------------
--    Copyright (c) 2013 Bentley Systems Incorporated. All rights reserved.
-----------------------------------------------------------------------------
--
REM SCCS ID Keyword, do no remove
define sccsid = '@(#)nm3.tyb	1.1 03/02/01';

-- j:\nm3\db_create\nm31_final.tyb
--
-- Generated for Oracle 8 on Thu Mar 01  14:00:48 2001 by Server Generator 6.0.3.3.0

PROMPT Creating Type Body for 'USER_HIST_ITEM'
CREATE OR REPLACE TYPE BODY USER_HIST_ITEM IS

MEMBER PROCEDURE DUMP_MODULE_HIST
 IS
-- PL/SQL Specification
this_uhi user_hist_item := SELF;

-- PL/SQL Block
begin
		for i in 1..this_uhi.uhi_modules.last loop
			dbms_output.put_line ('Seq: '||i||','||this_uhi.uhi_modules(i).uhi_module||', '||
												   this_uhi.uhi_modules(i).uhi_date);
		end loop;

		exception
			when others then
				return;
	end;

MEMBER FUNCTION INITIALIZE_VARRAY
 RETURN USER_HIST_ITEM
 IS
-- PL/SQL Specification
this_uhi user_hist_item := SELF;

-- PL/SQL Block
begin
		-- extend varray from the last value loaded from the table upto 10 elements
		for i in this_uhi.uhi_modules.last+1..this_uhi.uhi_modules.limit loop
			this_uhi.uhi_modules.extend;
			this_uhi.uhi_modules(i) := user_hist_module (NULL, NULL);
		end loop;
		return this_uhi;
	end;

MEMBER FUNCTION MODULE_EXISTS
 (MODULE IN VARCHAR2
 )
 RETURN NUMBER
 IS
-- PL/SQL Specification
this_uhi user_hist_item := SELF;

-- PL/SQL Block
begin
		for i in 1..this_uhi.uhi_modules.limit loop
			if this_uhi.uhi_modules(i).uhi_module = module then
				return i;
			end if;
		end loop;
		return 0;
	end;

MEMBER FUNCTION REMOVE_MODULE
 (VINDEX IN NUMBER
 )
 RETURN USER_HIST_ITEM
 IS
-- PL/SQL Specification
this_uhi user_hist_item := SELF;

-- PL/SQL Block
begin
		this_uhi.uhi_modules(vindex).uhi_module := NULL;
		return this_uhi;
	end;

MEMBER FUNCTION MODULE_RESEQUENCE
 (VINDEX IN NUMBER
 )
 RETURN USER_HIST_ITEM
 IS
-- PL/SQL Specification
this_uhi user_hist_item := SELF;

-- PL/SQL Block
begin

		for i in reverse 2..vindex loop
			if this_uhi.uhi_modules(i-1).uhi_module is not null then
				this_uhi.uhi_modules(i).uhi_module := this_uhi.uhi_modules(i-1).uhi_module;
				this_uhi.uhi_modules(i).uhi_date := this_uhi.uhi_modules(i-1).uhi_date;
			end if;
		end loop;

		return this_uhi;
	end;

MEMBER FUNCTION ADD_NEW_MODULE
 (MODULE IN VARCHAR2
 )
 RETURN USER_HIST_ITEM
 IS
-- PL/SQL Specification
this_uhi user_hist_item := SELF;
		module_index number;

-- PL/SQL Block
begin
		module_index := this_uhi.module_exists (module);
		if module_index > 0 then
			this_uhi := this_uhi.remove_module (module_index);
		else
			module_index := this_uhi.uhi_modules.last;
		end if;

		this_uhi := this_uhi.module_resequence (module_index);

		this_uhi.uhi_modules(1).uhi_module := module;
		this_uhi.uhi_modules(1).uhi_date := sysdate;

		return this_uhi;
	end;

MEMBER FUNCTION GET_MODULE
 (VINDEX IN NUMBER
 )
 RETURN VARCHAR2
 IS
-- PL/SQL Specification
this_uhi user_hist_item := SELF;

-- PL/SQL Block
begin
		if vindex < this_uhi.uhi_modules.first or vindex > this_uhi.uhi_modules.last then
			return NULL;
		end if;

		return this_uhi.uhi_modules(vindex).uhi_module;
	end;

END;
/

